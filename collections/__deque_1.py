from collections import deque

# deque - це двостороння черга, яка підтримує додавання та видалення елементів з обох кінців
# Створення черги
queue = deque()

# Enqueue: Додавання елементів в кінець черги
queue.append('b')
queue.append('c')

# додає елемент x на початок черги
queue.appendleft('a')

print("Черга після додавання елементів:", list(queue))

# Dequeue: Видалення елемента з початку/з лівого кінця черги
# popleft - видаляє перший елемент з deque, відповідаючи поведінці FIFO черги
# Якщо черга порожня, викидає виняток IndexError
print("Видалений елемент з початку:", queue.popleft())

# pop - видаляє останній елемент з deque, відповідаючи поведінці LIFO стеку
# Якщо черга порожня, викидає виняток IndexError
print("Видалений елемент з кінця:", queue.pop())

print("Черга після видалення елемента:", list(queue))

# Peek: Перегляд першого елемента
print("Перший елемент у черзі:", queue[0])

# IsEmpty: Перевірка на порожнечу
print("Чи черга порожня:", len(queue) == 0)

# Size: Розмір черги
print("Розмір черги:", len(queue))


# Створення пустої двосторонньої черги
d = deque()

# Додаємо елементи в чергу
d.append('middle')  # Додаємо 'middle' в кінець черги
d.append('last')    # Додаємо 'last' в кінець черги
d.appendleft('first')  # Додаємо 'first' на початок черги

# Виведення поточного стану черги
print("Черга після додавання елементів:", list(d))

# Видалення та виведення останнього елемента (з правого кінця)
print("Видалений останній елемент:", d.pop())

# Видалення та виведення першого елемента (з лівого кінця)
print("Видалений перший елемент:", d.popleft())

# Виведення поточного стану черги після видалення елементів
print("Черга після видалення елементів:", list(d))

# Ще однією особливістю deque є можливість обмежити розмір Deque
# нові елементи витісняють старіші, але розмір залишається незмінним
d = deque(maxlen=5)
for i in range(15):
    d.append(i)

print(d)
