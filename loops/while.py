# Користувач вводить число від 0 до 100. Підрахуйте,
# використовуючи цикл while, суму всіх чисел від першого
# до введеного числа включно в num.
# Результат помістити в змінну sum.

# Тести будуть:
# Поміщати тестові значення для змінної num: 20, 10, 5, 100
# І чекати суми в змінній sum: 210, 55, 15, 5050

num = int(input("Enter the integer (0 to 100): "))
sum = 0
i = 0

while i <= num:
    print("i:", i)
    sum += i
    i += 1
    print("sum:", sum)

# Цикл while виконує блок коду, поки задана умова є істинною (True).
# Як тільки умова стає неправдивою (False), цикл закінчується.

# Цикл while часто використовується, коли кількість ітерацій заздалегідь невідома
# або коли ітерації залежать від змінних, які можуть бути модифіковані
# в процесі виконання циклу.

k = 0
while k < 10:
    k = k + 1
    print(k)


# «Нескінченні цикли» та break
a = 0
while True:
    print(a)
    if a >= 20:
        break
    a = a + 1

# Нескінченні цикли часто застосовуються там, де потрібно взаємодіяти з клієнтом,
# чекаючи введення від нього, і завершується тільки при настанні деякої умови.
# Наприклад echo скрипт, який виводить в консоль те, що ви введете,
# доки ви не введете рядок тексту exit:

while True:
    user_input = input()
    print(user_input)
    if user_input == "exit":
        break

# Завершення ітерації за допомогою continue
a = 0
while a < 6:
    a = a + 1
    if not a % 2:
        continue
    print(a)
# у консолі виведеться: 1, 3, 5

# Оператори continue та break працюють тільки всередині одного циклу.
# В ситуації вкладених циклів немає способу вийти з усіх циклів одразу

while True:
    number = input("number = ")
    number = int(number)
    while True:
        print(number)
        number = number - 1
        if number < 0:
            break


# Такий код призводить до помилки SyntaxError.
# використання continue або break поза циклом 
# призводить до синтаксичної помилки.
# number = int(input("number = "))
# if number < 0:
#     break
