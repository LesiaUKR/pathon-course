# Рекурсія — це концепція в програмуванні, коли функція
# викликає саму себе в рамках власного виконання.

# Базовий випадок: Це умова, при якій рекурсія припиняє
# виклик самої себе, щоб уникнути нескінченного циклу.
# Він важливий для запобігання нескінченному циклу в рекурсії.


# Рекурсивний випадок: Це умова, за якої функція викликає саму
# себе з новими аргументами. Фактично це ситуація, коли функція
# продовжує викликати саму себе, розбиваючи проблему на менші частини

# Факторіал натурального числа n (позначається як n!) — це добуток
# всіх натуральних чисел від 1 до n включно.

# n! = 1 - якщо n = 0
# n! = n * (n-1)! - якщо n > 0

def factorial(n):
    if n == 0:  # базовий випадок
        return 1
    else:
        return n * factorial(n-1)  # рекурсивний випадок


print(factorial(5))  # виведе 120


# Числа Фібоначчі — це послідовність чисел, у якій кожне наступне число
# є сумою двох попередніх. Перші два числа в цій послідовності,
# за визначенням, дорівнюють 0 і 1.

# формула для числа Фібоначчі
# fib(n) = fib(n-1) + fib(n-2) - якщо n > 1
# fib(n) = 0 - якщо n = 0
# fib(n) = 1 - якщо n = 1

def fibonacci(n):
    if n <= 1:  # базовий випадок
        return n
    else:
        return fibonacci(n-1) + fibonacci(n-2)  # рекурсивний випадок


print(fibonacci(10))  # виведе 55

# Якщо рекурсивні виклики функції продовжуються без досягнення базового випадку,
# стек викликів може переповнитись, що призведе до помилки виконання.
# Така помилка називається переповненням стек

# Багаторазові виклики функцій без повернення збільшують стек викликів доти
# доки не буде витрачено всю виділену йому пам'ять комп'ютера.

# Щоб цьому запобігти, інтерпретатори примусово завершують роботу програми
# після досягнення ліміту викликів функцій, які не повертають результат.
# Така межа називається максимальною глибиною рекурсії, або максимальним
# розміром стеку викликів. У Python граничним значенням вважається 1000 викликів функцій.


# приклад коду, який показує, як працює стек викликів у рекурсії на
# прикладі функції для обчислення факторіала числа:

def factorial(n):
    print("Виклик функції factorial з n = ", n)
    if n == 1:
        print("Базовий випадок, n = 1, повернення 1")
        return 1
    else:
        result = n * factorial(n-1)
        print("Повернення результату для n = ", n, ": ", result)
        return result


print(factorial(5))
